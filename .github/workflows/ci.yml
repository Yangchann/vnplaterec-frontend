name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:

env:
  NODE_VERSION: '18'

jobs:
  simple-ci:
    runs-on: ubuntu-latest
    name: Simple CI Test

    steps:

      - name: Checkout code
        uses: actions/checkout@v4


      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit

      - name: Run tests
        run: |
          npm run test -- --passWithNoTests --watchAll=false || echo "No tests found, continuing..."

      - name: Lint code
        run: |
          npm run lint || echo "No linting configured, continuing..."

      - name: Build application
        run: |
          npm run build

      - name: SonarQubeScan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
            pollingTimeoutSec: 600
        env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: "SonarQube Quality Gate Status"
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"

      - name: Run Trivy vulnerability scanner in fs mode
        uses: aquasecurity/trivy-action@0.28.0
        with:
            scan-type: 'fs'
            scan-ref: '.'


    #   - name: Build an image from Dockerfile
    #     run: docker build -t docker.io/my-organization/my-app:${{ github.sha }} .

    #   - name: Run Trivy vulnerability scanner
    #     uses: aquasecurity/trivy-action@0.28.0
    #     with:
    #       image-ref: 'docker.io/my-organization/my-app:${{ github.sha }}'
    #       format: 'table'
    #       exit-code: '1'
    #       ignore-unfixed: true
    #       vuln-type: 'os,library'
    #       severity: 'CRITICAL,HIGH'


      - name: Notify Slack
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
