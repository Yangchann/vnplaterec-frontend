name: Frontend CI/CD Pipeline - License Plate Recognition

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY: docker.io
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  IMAGE_NAME: license-plate-frontend
  NODE_VERSION: '18'

jobs:
  # Job 1: Security Scan - File Level
  security-scan:
    runs-on: ubuntu-latest
    name: 🔍 Security Scan - Source Code

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Run Trivy file system scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './frontend'
          format: 'sarif'
          output: 'trivy-frontend-fs.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: 📤 Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-frontend-fs.sarif'
          category: 'frontend-filesystem'

  # Job 2: Dependencies Setup & Build
  build-and-test:
    runs-on: ubuntu-latest
    needs: security-scan
    name: 🏗️ Build & Test Frontend

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: 📦 Install dependencies
        run: |
          npm ci --prefer-offline --no-audit

      - name: 🔍 Audit dependencies
        run: |
          npm audit --audit-level=moderate

      - name: 🧪 Run unit tests
        run: |
          npm run test -- --coverage --passWithNoTests

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./frontend/coverage
          flags: frontend

      - name: 🏗️ Build application
        run: |
          npm run build

      - name: 💾 Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            ./frontend/.next
            ./frontend/out
          key: ${{ runner.os }}-frontend-build-${{ github.sha }}

  # Job 3: Docker Build & Security Scan
  docker-build:
    runs-on: ubuntu-latest
    needs: build-and-test
    name: 🐳 Docker Build & Security Scan

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔍 Run Trivy image scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-frontend-image.sarif'
          severity: 'CRITICAL,HIGH'

      - name: 📤 Upload Trivy image results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-frontend-image.sarif'
          category: 'frontend-container'

  # Job 4: SonarQube Analysis
  sonarqube-analysis:
    runs-on: ubuntu-latest
    needs: docker-build
    name: 📊 SonarQube Analysis

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run tests with coverage
        run: npm run test -- --coverage --passWithNoTests --watchAll=false

      - name: 📊 SonarQube Scan
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: frontend
          args: >
            -Dsonar.projectKey=license-plate-frontend
            -Dsonar.projectName="License Plate Recognition - Frontend"
            -Dsonar.sources=src
            -Dsonar.tests=src
            -Dsonar.test.inclusions="**/*.test.js,**/*.test.jsx,**/*.test.ts,**/*.test.tsx"
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.testExecutionReportPaths=test-report.xml

  # Job 5: Deploy to EKS (Only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build, sonarqube-analysis]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    name: 🚀 Deploy to EKS
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🔧 Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: 🏷️ Set image tag
        id: image-tag
        run: |
          echo "IMAGE_TAG=${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: 🚀 Deploy to Kubernetes
        run: |
          # Update deployment with new image
          kubectl set image deployment/lpr-frontend \
            frontend=${{ steps.image-tag.outputs.IMAGE_TAG }} \
            -n production

          # Wait for rollout to complete
          kubectl rollout status deployment/lpr-frontend -n production --timeout=300s

      - name: ✅ Verify deployment
        run: |
          kubectl get pods -n production -l app=lpr-frontend
          kubectl get services -n production -l app=lpr-frontend

  # Job 6: Notification
  notification:
    runs-on: ubuntu-latest
    needs: [security-scan, build-and-test, docker-build, sonarqube-analysis, deploy]
    if: always()
    name: 📢 Send Notifications

    steps:
      - name: 📊 Determine overall status
        id: status
        run: |
          if [[ "${{ needs.security-scan.result }}" == "failure" ||
                "${{ needs.build-and-test.result }}" == "failure" ||
                "${{ needs.docker-build.result }}" == "failure" ||
                "${{ needs.sonarqube-analysis.result }}" == "failure" ||
                "${{ needs.deploy.result }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
            echo "icon=❌" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
            echo "icon=✅" >> $GITHUB_OUTPUT
          fi

      - name: 📢 Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          channel: '#deployments'
          custom_payload: |
            {
              "attachments": [
                {
                  "color": "${{ steps.status.outputs.color }}",
                  "blocks": [
                    {
                      "type": "header",
                      "text": {
                        "type": "plain_text",
                        "text": "${{ steps.status.outputs.icon }} Frontend Pipeline - ${{ steps.status.outputs.status }}"
                      }
                    },
                    {
                      "type": "section",
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*Repository:* ${{ github.repository }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Branch:* ${{ github.ref_name }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Commit:* ${{ github.sha }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Author:* ${{ github.actor }}"
                        }
                      ]
                    },
                    {
                      "type": "section",
                      "fields": [
                        {
                          "type": "mrkdwn",
                          "text": "*Security Scan:* ${{ needs.security-scan.result }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Build & Test:* ${{ needs.build-and-test.result }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*Docker Build:* ${{ needs.docker-build.result }}"
                        },
                        {
                          "type": "mrkdwn",
                          "text": "*SonarQube:* ${{ needs.sonarqube-analysis.result }}"
                        }
                      ]
                    },
                    {
                      "type": "actions",
                      "elements": [
                        {
                          "type": "button",
                          "text": {
                            "type": "plain_text",
                            "text": "View Pipeline"
                          },
                          "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}